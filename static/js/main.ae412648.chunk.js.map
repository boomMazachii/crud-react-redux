{"version":3,"sources":["actions/transactionActions.js","components/TransactionForm.js","components/TransactionList.js","App.js","serviceWorker.js","reducers/transactionReducer.js","index.js"],"names":["insert","data","type","payload","update","Delete","id","updateIndex","index","TransactionForm","state","returnStateObject","handleInputChange","e","setState","target","name","value","handleSubmit","preventDefault","props","currentIndex","insertTransaction","updateTransaction","this","title","fname","lname","birthday","ucountries","gender","citi1","citi2","citi3","citi4","citi5","phone","titlephone","passport","expsalary","list","prevProps","length","countries","require","phonecode","class","onSubmit","autoComplete","style","color","onChange","required","selected","placeholder","map","item","key","code","for","maxlength","number","backgroundImageurl","pattern","Component","connect","dispatch","bindActionCreators","actions","TransactionList","handleEdit","updateTransactionIndex","handleDelete","deleteTransaction","scope","textAlign","width","onClick","App","Boolean","window","location","hostname","match","transactionReducer","action","JSON","parse","localStorage","getItem","push","setItem","stringify","splice","initialState","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae412648.chunk.js","sourcesContent":["export const insert = data => {\n    return {\n        type: 'INSERT',\n        payload: data\n    }\n}\n\nexport const update = data => {\n    return {\n        type: 'UPDATE',\n        payload: data\n    }\n\n}\n\nexport const Delete = id => {\n    return {\n        type: 'DELETE',\n        payload: id\n    }\n\n}\n\nexport const updateIndex = index => {\n    return {\n        type: 'UPDATE-INDEX',\n        payload: index\n    }\n\n}","import React, { Component } from 'react'\nimport '../bootstrap.css'\nimport { connect } from 'react-redux'\nimport * as actions from \"../actions/transactionActions\"\nimport { bindActionCreators } from \"redux\";\nimport '../countries.json'\nimport '../phonecode.json'\nclass TransactionForm extends Component {\n\n    state = {\n        ...this.returnStateObject()\n    }\n\n    returnStateObject() {\n        if (this.props.currentIndex == -1)\n            return {\n                title:'',\n                fname:'',\n                lname:'',\n                birthday:'',\n                ucountries:'',\n                gender:'',\n                citi1:'',\n                citi2:'',\n                citi3:'',\n                citi4:'',\n                citi5:'',\n                phone:'',\n                titlephone:'',\n                passport:'',\n                expsalary:''\n                \n            }\n        else\n            return this.props.list[this.props.currentIndex]  \n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentIndex != this.props.currentIndex || prevProps.list.length != this.props.list.length) {\n            this.setState({ ...this.returnStateObject() })\n        }\n    }\n\n    handleInputChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        if (this.props.currentIndex == -1)\n            this.props.insertTransaction(this.state)\n        else\n            this.props.updateTransaction(this.state)\n    }\n\n    render() {\n        const countries = require(\"../countries.json\");\n        const phonecode = require(\"../phonecode.json\");\n\n            return (\n            <div class = \"card\">\n            <form onSubmit= {this.handleSubmit} autoComplete=\"off\">\n                    <div class=\"form-group row\">\n                        <label class=\"col-form-label\">Title:</label><h4 style={{color:\"red\"}}>*</h4>\n                        <div class=\"col-1\">\n                        <select class=\"form-control\" name=\"title\" value = {this.state.title} onChange = {this.handleInputChange} required>\n                                <option selected value=\" \" >--Please Select--</option>\n                                <option value=\"Mr\" >Mr</option>\n                                <option value=\"Miss\">Miss</option>\n                                <option value=\"Mrs\">Mrs</option>\n                                <option value=\"Ms\">Ms</option>\n                        </select>\n                        </div>\n\n                        <label class=\"col-form-label\">Firstname:</label><h4 style={{color:\"red\"}}>*</h4>\n                        <div class=\"col-sm-4\">\n                            <input type=\"text\" class=\"form-control\" name =\"fname\" placeholder=\"Firstname\" value = {this.state.fname} onChange = {this.handleInputChange} required></input>\n                        </div>\n                        \n                        <label class=\"col-form-label\">Lastname:</label><h4 style={{color:\"red\"}}>*</h4>\n                        <div class=\"col-sm-4\">\n                            <input type=\"text\" class=\"form-control\" name =\"lname\" placeholder=\"Lastname\" value = {this.state.lname} onChange = {this.handleInputChange} required></input>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                    <label class=\"col-form-label\">Birthday:</label><h4 style={{color:\"red\"}}>*</h4>\n                        <div class=\"col-4\">\n                            <input class=\"form-control\" type=\"date\" name =\"birthday\" value = {this.state.birthday} onChange = {this.handleInputChange} required></input>\n                        </div>\n\n                        <label class=\"col-form-label\">Nationality:</label>\n                        <div class=\"col-6\">\n                        <select class=\"form-control\" name=\"ucountries\" value = {this.state.ucountries} onChange = {this.handleInputChange}>\n                        {\n                           countries.map(item => (\n                                <option key = {item.code} value = {item.name}>{item.name}</option>\n                           )) \n                        }\n                        </select>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                    <label for=\"inputCitizenID\" class=\"col-form-label\" >CitizenID:</label><h4 style={{color:\"red\"}}>*</h4>\n                        <div class=\"col-sm-6\">\n                            <fieldset onChange = {this.handleInputChange}>\n                            <input type=\"num\" class=\"input-cart-number\" maxlength=\"1\" name =\"citi1\" value = {this.state.citi1} required onChange = {this.handleInputChange}></input>\n                            <input type=\"num\" class=\"input-cart-number2\" maxlength=\"4\" name =\"citi2\" value = {this.state.citi2} required onChange = {this.handleInputChange}></input>\n                            <input type=\"num\" class=\"input-cart-number3\" maxlength=\"5\" name =\"citi3\" value = {this.state.citi3} required onChange = {this.handleInputChange}></input>\n                            <input type=\"num\" class=\"input-cart-number4\" maxlength=\"2\" name =\"citi4\" value = {this.state.citi4} required onChange = {this.handleInputChange}></input>\n                            <input type=\"num\" class=\"input-cart-number5\" maxlength=\"1\" name =\"citi5\" value = {this.state.citi5} required onChange = {this.handleInputChange}></input>\n                            </fieldset>\n                        </div>\n                    </div>\n                    \n                    <div class=\"form-group row\">\n                    <label class=\"col-form-label\">Gender:</label>\n                            <div class=\"col-1 form-check form-check-inline\">  \n                                <input class=\"form-check-input\" type=\"radio\" name=\"gender\"  value = \"Male\"  onChange = {this.handleInputChange}></input>\n                                <label class=\"form-check-label\">Male</label>\n                            </div>\n                            <div class=\"col-1 form-check form-check-inline\">\n                                <input class=\"form-check-input\" type=\"radio\" name=\"gender\"  value = \"Female\" onChange = {this.handleInputChange}></input>\n                                <label class=\"form-check-label\">Female</label>\n                            </div>\n                                <div class=\"col-1 form-check form-check-inline\">\n                                <input class=\"form-check-input\" type=\"radio\" name=\"gender\"  value = \"Unisex\" onChange = {this.handleInputChange}></input>\n                                <label class=\"form-check-label\">Unisex</label>\n                            </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                    <label for=\"exampleSelect1\" class=\"col-form-label\">Mobile:</label><h4 style={{color:\"red\"}}>*</h4>\n                        <div class=\"col-1\">\n                        <select class=\"form-control\" name=\"titlephone\" value = {this.state.titlephone} onChange = {this.handleInputChange} >\n                        {\n                           phonecode.map(item => (\n                                <option key = {item.number} value = {item.number} style={{backgroundImageurl:({})}}>\n                                    {/*<div><img src={item.flag} style= {{width:\"2px\",height:\"1\"}}></img></div>{item.flag}*/}{item.number}&nbsp;{item.name}</option> \n                           )) \n                        }\n                        </select>\n                        </div>\n                        <div class=\"col-4\">\n                            <input class=\"form-control\" type=\"tel\" maxlength=\"10\" pattern=\"^0([8|9|6])([0-9]{8}$)\" placeholder=\"e.g. 081 234 5678 (TH)\" name = \"phone\" value = {this.state.phone} onChange = {this.handleInputChange} required></input>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                    <label class=\"col-form-label\">Passport No:</label>\n                        <div class=\"col-4\">\n                            <input class=\"form-control\" type=\"text\" placeholder=\"e.g. PA12345678\" name = \"passport\" value = {this.state.passport} onChange = {this.handleInputChange}></input>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                    <label  class=\"col-form-label\">Expected Salary:</label><h4 style={{color:\"red\"}}>*</h4>\n                        <div class=\"col-4\">\n                            <input class=\"form-control\" type=\"text\"  name = \"expsalary\" value = {this.state.expsalary} onChange = {this.handleInputChange} required  placeholder=\"e.g. 1,000,000\"></input>\n                        </div>\n\n                        <label class=\"col-2\">THB</label>\n                        <div class =\"col-4\">\n                            <button class=\"btn btn-success\">SUBMIT</button>\n                        </div>\n                    </div>\n                </form>\n                </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        list: state.list,\n        currentIndex: state.currentIndex\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return bindActionCreators({\n        insertTransaction: actions.insert,\n        updateTransaction: actions.update\n    }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionForm)","import React, { Component } from 'react'\nimport '../bootstrap.css'\nimport TransactionForm from './TransactionForm'\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions/transactionActions\"\nimport { bindActionCreators } from \"redux\";\n\n\nclass TransactionList extends Component {\n\n\n    handleEdit = (index) => {\n        this.props.updateTransactionIndex(index)\n    }\n\n    handleDelete = (index) => {\n        this.props.deleteTransaction(index)\n    }\n\n \n    render() {\n        return (\n            \n            <div>\n                <TransactionForm />\n                <div class = \"card\">\n                <table id=\"dt-all-checkbox\" class=\"table-striped\" >\n                    <thead>\n                        <tr>\n                        <th scope=\"col\" style= {{textAlign :\"center\"}}>CitizenID</th>\n                        <th scope=\"col\" style= {{textAlign :\"center\"}}>Name</th>\n                        <th scope=\"col\" style= {{textAlign :\"center\"}}>Gender</th>\n                        <th scope=\"col\" style= {{textAlign :\"center\"}}>Mobile Phone</th>\n                        <th scope=\"col\" style= {{textAlign :\"center\"}}>Nationality</th>\n                        <th scope=\"col\" style= {{textAlign :\"center\"}}></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                           this.props.list.map((item, index) =>{\n                                return <tr key = {index}>\n                                    <td style= {{width:\"250px\",textAlign :\"center\"}}>{item.citi1}-{item.citi2}-{item.citi3}-{item.citi4}-{item.citi5}</td>\n                                    <td style= {{width:\"450px\"}}>{item.title}&nbsp;{item.fname}&nbsp;{item.lname}</td>\n                                    <td style= {{width:\"225px\",textAlign :\"center\"}}>{item.gender}</td>\n                                    <td style= {{width:\"300px\",textAlign :\"center\"}}>{item.titlephone}{item.phone}</td>\n                                    <td style= {{width:\"270px\",textAlign :\"center\"}}>{item.ucountries}</td>\n                                    <td style= {{width:\"200px\"}}><button onClick={() => this.handleEdit(index)} class=\"btn btn-primary\">Edit</button>&nbsp;\n                                        <button onClick={() => this.handleDelete(index)} class=\"btn btn-danger\">Delete</button>\n                                    </td> \n                                </tr>\n                            })\n                        }\n                    </tbody>\n                    </table>\n                </div>\n            </div>\n           \n            \n\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        list: state.list\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        updateTransactionIndex: actions.updateIndex,\n        deleteTransaction: actions.Delete\n    }, dispatch)\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionList)","import React from 'react';\nimport './App.css';\nimport TransactionList from './components/TransactionList';\n\n\nfunction App() {\n  return (\n    <TransactionList />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const transactionReducer = (state, action) => {\n    var list = JSON.parse(localStorage.getItem('transactions'))\n    switch (action.type) {\n        case 'INSERT':\n            list.push(action.payload)\n            localStorage.setItem('transactions', JSON.stringify(list))\n            return { list, currentIndex: -1 }\n        case 'UPDATE':\n            list[state.currentIndex] = action.payload\n            localStorage.setItem('transactions', JSON.stringify(list))\n            return { list, currentIndex: -1 }\n\n        case 'UPDATE-INDEX':\n            return { list, currentIndex: action.payload }\n\n        case 'DELETE':\n            list.splice(action.payload, 1)\n            localStorage.setItem('transactions', JSON.stringify(list))\n            return { list, currentIndex: -1 }\n        default:\n            return state;\n    }\n\n}\n\n\n\nexport default transactionReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from \"redux\";\nimport transactionReducer from \"./reducers/transactionReducer\";\nimport { Provider } from \"react-redux\";\n\nif (localStorage.getItem('transactions') == null)\n    localStorage.setItem('transactions', JSON.stringify([]))\nlet initialState = {\n    currentIndex: -1,\n    list: JSON.parse(localStorage.getItem('transactions'))\n}\nconst store = createStore(transactionReducer, initialState)\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}